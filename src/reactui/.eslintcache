[{"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/index.js":"1","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/reportWebVitals.js":"2","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/App.js":"3","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Dashboard/Dashboard.js":"4","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Admin/index.js":"5","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Login/index.js":"6","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/components/TutorialHeader/index.js":"7","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Login/Login.js":"8","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Admin/Admin.js":"9","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/components/TutorialHeader/TutorialHeader.js":"10","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Dashboard/index.js":"11"},{"size":500,"mtime":1613643637994,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1613643637995,"results":"14","hashOfConfig":"13"},{"size":844,"mtime":1613643637946,"results":"15","hashOfConfig":"13"},{"size":9696,"mtime":1614766132925,"results":"16","hashOfConfig":"13"},{"size":50,"mtime":1613643637991,"results":"17","hashOfConfig":"13"},{"size":50,"mtime":1613643637994,"results":"18","hashOfConfig":"13"},{"size":77,"mtime":1613643637990,"results":"19","hashOfConfig":"13"},{"size":5700,"mtime":1614766026814,"results":"20","hashOfConfig":"13"},{"size":4671,"mtime":1613649193423,"results":"21","hashOfConfig":"13"},{"size":1797,"mtime":1613643637989,"results":"22","hashOfConfig":"13"},{"size":62,"mtime":1613643637992,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1vuqlx",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/index.js",[],["53","54"],"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/reportWebVitals.js",[],"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/App.js",["55","56","57"],"import logo from './logo.svg';\nimport './App.css';\nimport {\n  Link, \n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\"\n\nimport Login from \"./content/Login\"\nimport Admin from \"./content/Admin\"\nimport Dashboard from \"./content/Dashboard/Dashboard\"\nimport './app.scss'\nimport TutorialHeader from './components/TutorialHeader';\nimport { Content } from 'carbon-components-react';\n\nfunction App() {\n  return (\n    <Router>\n      <div >\n        <TutorialHeader />\n        {/* <Content> */}\n          <Switch>\n              <Route path=\"/dashboard\"> <Dashboard /> </Route>\n              <Route path=\"/admin\"> <Admin /> </Route>\n              <Route path=\"/login\"> <Login /> </Route>\n              <Route path=\"/\"> <Login /> </Route>\n          </Switch>\n        {/* </Content> */}\n      </div>\n  </Router>\n  )\n}\n\nexport default App;","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Dashboard/Dashboard.js",["58","59","60"],"import React from \"react\"\nimport {\n    withRouter\n  } from \"react-router-dom\"\nimport {Dropdown, Loading, Tabs, Tab} from 'carbon-components-react'\nimport axios from 'axios'\nimport {Container, Row} from 'react-bootstrap'\nimport {\n    BrowserView,\n    MobileView,\n} from \"react-device-detect\";\nimport back from './../../assets/background3.jpg'\n\n\n  class Dashboard extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            selected: \"Select Channel\",\n            channelList: [],\n            loading: true,\n            code:\"\",\n            playlists:[]\n        }\n    }\n\n    componentDidMount(){\n        // console.log(access_token)\n        // console.log(this.props.location.state.user)\n        if(!this.props.location.state){\n            alert(\"Please Login to continue\")\n            this.props.history.push({\n                pathname:'/login',\n                state:{ reload:true }\n            })\n        } else {\n            const access_token = this.props.location.state.access_token?this.props.location.state.access_token:\"\"\n            if(Object.keys(access_token).length !== 0){\n                // console.log(access_token)\n                this.setState({code: access_token})\n                const headers = {\n                    'Authorization': 'Bearer ' + access_token,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    \"Access-Control-Allow-Origin\": \"*\"\n                }\n                axios.get('https://api.video.ibm.com/users/self/channels.json',{headers:headers}).then(res=>{\n                    // console.log(res)\n                    this.setState({loading:false, channelsData: res.data.channels, headers})\n                    const arr = Object.values(res.data.channels)\n                    // console.log(arr)\n                    const items = arr.map(item=>{\n                        return({\n                            id: item.id,\n                            text: item.title\n                        })\n                    })\n                    this.setState({channelList: items})\n                    // console.log(items)\n                })\n            } else {\n                console.log(\"nope\")\n            }\n        }\n    }\n\n    onChange = async (e)=>{\n        console.log(e)\n        this.setState({loading: true, selected: e.selectedItem.text, selectedItem: e.selectedItem})\n\n        await axios.get(`http://${window.location.hostname}:${window.location.port}/fetchPlaylists/?id=${e.selectedItem.id}`)\n        .then(res=>{\n            console.log(Object.keys(res.data))\n            console.log(res.data[\"0\"])\n            const arr = Object.values(res.data.playlists)\n                const items = arr.map(item=>{\n                    return({\n                        id: item.id,\n                        text: item.title\n                    })\n                })\n                console.log(\"playlists\", items)\n                this.setState({playlists: items})\n        })\n        .catch(err=>{\n            console.log(\"nopr\" ,err)\n            console.log(this.state.playlists)\n        })\n\n        this.setState({loading: false})\n    }\n\n    showPlaylists = ()=>{\n        const arr = this.state.playlists.map(item=>{\n            return(\n                <Tab label={item.text}>\n                    <BrowserView>\n                        <div className=\"some-content\">\n                            <iframe src={`https://video.ibm.com/combined-embed/playlist/${item.id}`} style={{border: \"0\", padding:\"0\",backgroundColor:\"white\"}} webkitallowfullscreen allowFullScreen frameBorder=\"no\" width=\"1040\" height=\"405\" referrerPolicy=\"no-referrer-when-downgrade\"></iframe>                     \n                        </div>\n                    </BrowserView>\n                    <MobileView>\n                        <div className=\"some-content\"\n                        style={{paddingTop:\"56.25%\", position:\"relative\", overflow:\"hidden\", display:\"block\", height:\"auto\", width: \"100%\"}}\n                        >\n                            <iframe src={`https://video.ibm.com/combined-embed/playlist/${item.id}`} style={{border: \"0\", padding:\"0\",backgroundColor:\"white\", position:\"relative\"}} webkitallowfullscreen allowFullScreen frameBorder=\"no\" width=\"100%\" height=\"auto\" referrerPolicy=\"no-referrer-when-downgrade\"></iframe>                     \n                        </div>\n                    </MobileView>\n                </Tab>\n            )\n        })\n        return arr\n    }\n\n    render(){\n\n        return (\n\n            <Container fluid={true} \n                style={{display:\"flex\", \n                    clear:\"both\", \n                    justifyContent: \"center\",\n                    minHeight:\"100vh\", \n                    overflow:\"scroll\", \n                    padding:\"1rem\",\n                    backgroundImage: `url(${back})`, \n                    // backgroundPositionX:\"350px\", \n                    backgroundSize: 'cover',\n                    alignItems: \"center\"}}>\n                <Row className=\"justify-content-md-center\">\n                {\n                    this.state.loading?\n                    <Loading\n                        style={{align: 'center'}}\n                        description=\"Active loading indicator\" withOverlay={false}\n                    />\n                    :\n                    <div className=\"bx--grid bx--grid--full-width landing-page\" >\n                        <div className=\"bx--row landing-page__banner\">\n                            <h1 style={{color:\"white\"}}>\n                                <strong>E-Learning Portal using Watson Media</strong>\n                            </h1>\n                        </div>\n                        <div className=\"bx--row landing-page__r2\">\n                            <div className=\"bx--col bx--no-gutter\">\n                                <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\" style={{}}>\n                                    <div className=\"bx--row landing-page__tab-content\">\n                                        <div className=\"bx--col-md-4 bx--col-lg-7\">\n                                            <div style={{ maxWidth: 400 }}>\n                                                <Dropdown\n                                                    id=\"default\"\n                                                    titleText=\"Channel List\"\n                                                    // helperText=\"This is some helper text\"\n                                                    label= {this.state.selected}\n                                                    items={this.state.channelList}\n                                                    itemToString={(item) => (item ? item.text : '')}\n                                                    onChange={this.onChange}\n                                                />\n                                            </div><br/>        \n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"bx--row landing-page__r3\">\n                            <div className=\"bx--col-md-4 bx--col-lg-8\">\n                                    {\n                                        this.state.selected === \"Select Channel\"?\n                                        <p></p>\n                                        :\n                                        <div>\n                                            <div className='tabs-story-wrapper' >\n                                                <Tabs backgroundColor=\"white\" style={{paddingLeft:\"2rem\"}}\n                                                type=\"container\">\n                                                    <Tab label=\"Videos\">\n                                                        <div>\n                                                        <iframe src={`https://video.ibm.com/combined-embed/${this.state.selectedItem.id}/?social=0&videos=tab` } style={{border: \"0\", padding:\"0\",backgroundColor:\"white\"}} webkitallowfullscreen allowFullScreen frameBorder=\"no\" width=\"1040\" height=\"405\" referrerPolicy=\"no-referrer-when-downgrade\"></iframe>\n                                                        </div>\n                                                    </Tab>\n                                                    {\n                                                        this.state.playlists.length===0\n                                                        ?\n                                                            <div></div>\n                                                        :\n                                                        <Tab label=\"Playlists\" style={{color:\"white\"}}>\n                                                            <Tabs backgroundColor=\"white\" style={{paddingLeft:\"1rem\"}}\n                                                                type=\"container\">\n                                                                {this.showPlaylists()}\n                                                            </Tabs> \n                                                        </Tab>\n                                                    }\n                                                    </Tabs>\n                                            </div>\n                                        </div>\n                                    }\n                            </div>\n                        </div>\n                    </div>\n                }\n                </Row>\n            </Container>\n          );\n    }\n}\n\nexport default withRouter(Dashboard)","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Admin/index.js",[],"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Login/index.js",[],"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/components/TutorialHeader/index.js",[],"/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Login/Login.js",["61","62","63","64","65","66","67","68"],"import React from \"react\"\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    withRouter\n  } from \"react-router-dom\"\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Dashboard from \"./../Dashboard\"\nimport { Button, TextInput, Form, Loading } from 'carbon-components-react';\nimport back from './../../assets/background3.jpg'\nvar data = require('./../sampleLogin.json')\nconst axios = require('axios')\n\n\nclass Login extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            email: \"\",\n            password:\"\",\n            loading: true,\n            auth:false\n        }\n    }\n\n    componentDidMount(){\n        // console.log(window.location.hostname)\n        axios.get(`http://${window.location.hostname}:${window.location.port}/showToken`).then(res=>{\n        // axios.get(`http://${window.location.hostname}:8080/showToken`).then(res=>{\n            console.log(res.data)\n            const access_token = res.data.access_token\n            if(access_token !== \"expired\" && access_token.length === 40){\n                this.setState({auth:true, loading:false, access_token})\n                // console.log('auth')\n            } else {\n                alert(\"Contact Admin to authorize page\")\n                this.props.history.push('/admin')\n            }\n        }).catch((err)=>{\n            alert(\"Contact Admin to authorize page\")\n            console.log(err)\n            this.props.history.push('/admin')\n        })\n    }\n\n    handleChange = (e) =>{\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = (e)=>{\n        e.preventDefault()\n        if(this.state.email === \"\" || this.state.password === \"\"){\n            alert(\"Please enter email and password\")\n            return\n        }\n        if(!this.state.auth){\n            console.log(\"Toast\")\n            // this.Toast()\n            alert(\"Please contact Admin to authorize the page\")\n            return\n        }\n        var found = false\n        var user = {}\n        data.map(item => {\n            if(item.email === this.state.email && item.password === this.state.password){\n                found = true\n                user = item\n            }\n        })\n        if(found){\n            const access_token = this.state.access_token\n            this.props.history.push({\n                pathname:'/dashboard',\n                state:{ user, access_token }\n            })\n        } else {\n            alert(\"Invalid Email or Password\")\n            return\n        }\n        console.log(found, user)\n    }\n\n\n    render(){\n        return(\n            <Container fluid={true} \n                style={{display:\"flex\", \n                    overflow:\"auto\", \n                    clear:\"both\", \n                    justifyContent: \"center\",\n                    minHeight:\"100vh\", \n                    overflow:\"scroll\", \n                    backgroundImage: `url(${back})`, \n                    // backgroundPositionX:\"350px\", \n                    backgroundSize: 'cover', \n                    width:'100%',\n                    padding:'1rem',\n                    alignItems: \"center\"}}>\n                <Row >\n                    {\n                        this.state.loading?\n                        <Loading\n                            style={{align: 'center'}}\n                            description=\"Active loading indicator\" withOverlay={false}\n                        />\n                        :\n                    <Col md={12}>\n                        <div >\n                            <h1 style={{color:\"white\"}}>\n                                <strong>E-Learning Portal using<br/> Watson Media</strong>\n                            </h1>\n                        </div><br/>\n                        <div style={{alignItems: \"center\"}}>\n                            <Form>\n                                <TextInput\n                                    id=\"test2\"\n                                    invalidText=\"A valid value is required\"\n                                    placeholder=\"Email\"\n                                    style={{marginBottom:\"0.5em\"}}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    value= {this.state.email}\n                                    onChange = {this.handleChange}\n                                    invalid={false}\n                                />\n                                <TextInput.PasswordInput \n                                    hidePasswordLabel=\"Hide password\"\n                                    id=\"test\"\n                                    invalidText=\"A valid value is required\"\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    value= {this.state.password}\n                                    onChange = {this.handleChange}\n                                />\n                                <Button\n                                    style={{marginTop:\"1em\"}}\n                                    kind=\"primary\"\n                                    tabIndex={0}\n                                    type=\"submit\"\n                                    onClick={this.handleClick}\n                                >\n                                   Login\n                                </Button>\n                            </Form>\n                            \n                        </div>\n                    </Col>\n                    }\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default withRouter(Login)","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Admin/Admin.js",["69"],"import React from \"react\"\nimport {\n    withRouter\n  } from \"react-router-dom\"\nimport { Container, Row, Col } from 'react-bootstrap';\n// import Dashboard from \"../Dashboard\"\n// import access_token from '../access_token'\nimport { Button, Form, TextInput } from 'carbon-components-react';\nimport back from './../../assets/background3.jpg'\nconst axios = require('axios')\n\nclass Admin extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            email: \"\",\n            password:\"\",\n            loading: false,\n            clientId:\"\"\n\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://${window.location.hostname}:${window.location.port}/getClientId`).then(res=>{\n        // axios.get(`http://${window.location.hostname}:8080/getClientId`).then(res=>{\n            console.log(res.data)\n            const clientId = res.data\n            if(clientId !== \"Enter Client ID\" && clientId.length === 40){\n                this.setState({loading:false, clientId})\n            }\n        }).catch(err=>{\n            console.log(err)\n        })\n    }\n\n    handleChange = (e) =>{\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = (e)=>{\n        e.preventDefault()\n        const data = {clientId: this.state.clientId}\n        axios.post(`http://${window.location.hostname}:${window.location.port}/setClientId`, data)\n        // axios.post(`http://${window.location.hostname}:8080/setClientId`, data)\n        .then(res=>{\n            console.log(res)\n            window.location.href = `https://authentication.video.ibm.com/authorize?client_id=${this.state.clientId}&response_type=token&redirect_uri=http://${window.location.hostname}:${window.location.port}/get_token`\n            // window.location.href = `https://authentication.video.ibm.com/authorize?client_id=${this.state.clientId}&response_type=token&redirect_uri=http://${window.location.hostname}:8080/get_token`\n        })\n    }\n\n    render(){\n        return(\n            <Container fluid={true} \n                style={{display:\"flex\", \n                    overflow:\"auto\", \n                    clear:\"both\", \n                    justifyContent: \"center\",\n                    minHeight:\"100vh\", \n                    overflow:\"scroll\", \n                    backgroundImage: `url(${back})`, \n                    // backgroundPositionX:\"350px\", \n                    backgroundSize: 'cover', \n                    alignItems: \"center\"}}>\n                <Row className=\"justify-content-md-center\">\n                    <Col md={12}>\n                        <div className=\"bx--row landing-page__banner\">\n                            <h1 style={{color:\"white\"}}>\n                                <strong>E-Learning Portal using<br/> Watson Media</strong>\n                            </h1>\n                        </div>\n                    </Col>\n                    <Col>\n                        <h5 style={{color:\"white\"}}>\n                            Welcome Admin,\n                        </h5><br/>\n                    </Col>\n                {/* </Row>\n                <Row className=\"justify-content-md-center\"> */}\n                    <Col xs md={4}>\n                        <div>\n                            <Form>\n                                <TextInput\n                                    id=\"test2\"\n                                    invalidText=\"A valid value is required\"\n                                    placeholder=\"Enter Client ID\"\n                                    style={{marginBottom:\"0.5em\"}}\n                                    type=\"text\"\n                                    name=\"clientId\"\n                                    value= {this.state.clientId}\n                                    onChange = {this.handleChange}\n                                    invalid={false}\n                                />\n                                <Button\n                                    disabled={this.state.clientId.length === 40?false:true}\n                                    style={{marginTop:\"0.5em\"}}\n                                    kind=\"primary\"\n                                    tabIndex={0}\n                                    type=\"submit\"\n                                    onClick={this.handleClick}\n                                >\n                                    Authorize Access to Videos\n                                </Button>\n                            </Form>\n                            \n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default withRouter(Admin)\n","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/components/TutorialHeader/TutorialHeader.js",["70","71","72","73","74","75","76","77","78","79"],"import React from 'react';\nimport {\n  AppSwitcher20,\n  Notification20,\n  UserAvatar20,\n} from '@carbon/icons-react';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\nconst TutorialHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Carbon Tutorial\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href=\"/\" prefix=\"IBM\">\n          E-Learning Portal\n        </HeaderName>\n        {/* <HeaderNavigation aria-label=\"Carbon Tutorial\">\n          <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n        </HeaderNavigation> */}\n        {/* <SideNav\n          aria-label=\"Side navigation\"\n          expanded={isSideNavExpanded}\n          isPersistent={false}> */}\n          {/* <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems> */}\n        {/* </SideNav> */}\n        {/* <HeaderGlobalBar>\n          <HeaderGlobalAction aria-label=\"Notifications\">\n            <Notification20 />\n          </HeaderGlobalAction>\n          <HeaderGlobalAction aria-label=\"User Avatar\">\n            <UserAvatar20 />\n          </HeaderGlobalAction>\n          <HeaderGlobalAction aria-label=\"App Switcher\">\n            <AppSwitcher20 />\n          </HeaderGlobalAction>\n        </HeaderGlobalBar> */}\n      </Header>\n    )}\n  />\n);\nexport default TutorialHeader;","/Users/kushagra/IBM/Watson-Media/build-an-elearning-portal-with-watson-media/src/reactui/src/content/Dashboard/index.js",[],["80","81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":12},{"ruleId":"86","severity":1,"message":"90","line":4,"column":3,"nodeType":"88","messageId":"89","endLine":4,"endColumn":7},{"ruleId":"86","severity":1,"message":"91","line":15,"column":10,"nodeType":"88","messageId":"89","endLine":15,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":98,"column":29,"nodeType":"94","endLine":98,"endColumn":286},{"ruleId":"92","severity":1,"message":"93","line":105,"column":29,"nodeType":"94","endLine":105,"endColumn":308},{"ruleId":"92","severity":1,"message":"93","line":176,"column":57,"nodeType":"94","endLine":176,"endColumn":346},{"ruleId":"86","severity":1,"message":"95","line":3,"column":22,"nodeType":"88","messageId":"89","endLine":3,"endColumn":28},{"ruleId":"86","severity":1,"message":"96","line":4,"column":5,"nodeType":"88","messageId":"89","endLine":4,"endColumn":11},{"ruleId":"86","severity":1,"message":"97","line":5,"column":5,"nodeType":"88","messageId":"89","endLine":5,"endColumn":10},{"ruleId":"86","severity":1,"message":"90","line":6,"column":5,"nodeType":"88","messageId":"89","endLine":6,"endColumn":9},{"ruleId":"86","severity":1,"message":"98","line":7,"column":5,"nodeType":"88","messageId":"89","endLine":7,"endColumn":13},{"ruleId":"86","severity":1,"message":"99","line":11,"column":8,"nodeType":"88","messageId":"89","endLine":11,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":70,"column":23,"nodeType":"102","messageId":"103","endLine":70,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":98,"column":21,"nodeType":"106","messageId":"107","endLine":98,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":64,"column":21,"nodeType":"106","messageId":"107","endLine":64,"endColumn":29},{"ruleId":"86","severity":1,"message":"108","line":3,"column":3,"nodeType":"88","messageId":"89","endLine":3,"endColumn":16},{"ruleId":"86","severity":1,"message":"109","line":4,"column":3,"nodeType":"88","messageId":"89","endLine":4,"endColumn":17},{"ruleId":"86","severity":1,"message":"110","line":5,"column":3,"nodeType":"88","messageId":"89","endLine":5,"endColumn":15},{"ruleId":"86","severity":1,"message":"111","line":11,"column":3,"nodeType":"88","messageId":"89","endLine":11,"endColumn":19},{"ruleId":"86","severity":1,"message":"112","line":13,"column":3,"nodeType":"88","messageId":"89","endLine":13,"endColumn":17},{"ruleId":"86","severity":1,"message":"113","line":14,"column":3,"nodeType":"88","messageId":"89","endLine":14,"endColumn":18},{"ruleId":"86","severity":1,"message":"114","line":15,"column":3,"nodeType":"88","messageId":"89","endLine":15,"endColumn":21},{"ruleId":"86","severity":1,"message":"115","line":17,"column":3,"nodeType":"88","messageId":"89","endLine":17,"endColumn":10},{"ruleId":"86","severity":1,"message":"116","line":18,"column":3,"nodeType":"88","messageId":"89","endLine":18,"endColumn":15},{"ruleId":"86","severity":1,"message":"117","line":19,"column":3,"nodeType":"88","messageId":"89","endLine":19,"endColumn":21},{"ruleId":"82","replacedBy":"118"},{"ruleId":"84","replacedBy":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Content' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'Dashboard' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'overflow'.","ObjectExpression","unexpected","'AppSwitcher20' is defined but never used.","'Notification20' is defined but never used.","'UserAvatar20' is defined but never used.","'HeaderNavigation' is defined but never used.","'HeaderMenuItem' is defined but never used.","'HeaderGlobalBar' is defined but never used.","'HeaderGlobalAction' is defined but never used.","'SideNav' is defined but never used.","'SideNavItems' is defined but never used.","'HeaderSideNavItems' is defined but never used.",["120"],["121"],"no-global-assign","no-unsafe-negation"]